{"version":3,"sources":["CartContext.js","components/Product.js","components/Products.js","pages/Home.js","components/Navbar.js","pages/ProductsPage.js","pages/Cart.js","pages/SingleProduct.js","App.js","Helpers.js","index.js"],"names":["CartContext","createContext","Product","product","useState","isAdding","setIsAdding","useContext","cart","setCart","to","_id","src","image","alt","className","name","size","price","onClick","e","preventDefault","_cart","items","totalItems","setTimeout","addToCart","disabled","Products","products","setProducts","useEffect","fetch","then","response","json","map","Home","Navbar","style","height","backgroundColor","display","padding","borderRadius","ProductsPage","Cart","total","priceFetched","togglePriceFetched","method","headers","body","JSON","stringify","ids","Object","keys","getQty","productId","getSum","sum","length","existingQty","decrement","increment","qty","updatedProductList","filter","handleDelete","window","alert","SingleProduct","setProduct","params","useParams","navigate","useNavigate","App","Promise","resolve","reject","localStorage","getItem","parse","setItem","storeCart","Provider","value","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAIaA,EAAcC,wBAAc,M,OC2F1BC,EA1FC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEjB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAA0BC,qBAAWP,GAA7BQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAyDd,OACE,cAAC,IAAD,CAAMC,GAAE,oBAAeP,EAAQQ,KAA/B,SACE,gCACE,qBAAKC,IAAKT,EAAQU,MAAOC,IAAI,UAC7B,sBAAKC,UAAU,cAAf,UACE,oBAAIA,UAAU,yBAAd,SAAwCZ,EAAQa,OAChD,sBAAMD,UAAU,6CAAhB,SACGZ,EAAQc,UAGb,sBAAKF,UAAU,yCAAf,UACE,2CAASZ,EAAQe,SACjB,yBACEH,UAAS,UACPV,EAAW,eAAiB,gBADrB,sCAGTc,QAAS,SAACC,IAtEF,SAACA,EAAGjB,GACpBiB,EAAEC,iBAGF,IAAIC,EAAK,eAAQd,GAKZc,EAAMC,QACTD,EAAMC,MAAQ,IAKZD,EAAMC,MAAMpB,EAAQQ,KACtBW,EAAMC,MAAMpB,EAAQQ,MAAQ,EAK5BW,EAAMC,MAAMpB,EAAQQ,KAAO,EAIxBW,EAAME,aACTF,EAAME,WAAa,GAErBF,EAAME,YAAc,EAGpBf,EAAQa,GACRhB,GAAY,GACZmB,YAAW,WACTnB,GAAY,KACX,KAoCOoB,CAAUN,EAAGjB,IAEfwB,SAAUtB,EAPZ,gBASMA,EAAW,KAAO,eC5DnBuB,EAxBE,WAEf,MAAgCxB,mBAAS,IAAzC,mBAAOyB,EAAP,KAAiBC,EAAjB,KAUA,OARAC,qBAAU,WACRC,MAAM,iBACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACJ,GACLC,EAAYD,QAEf,IAGD,sBAAKd,UAAU,0BAAf,UACE,oBAAIA,UAAU,yBAAd,sBACA,qBAAKA,UAAU,+BAAf,SACGc,EAASO,KAAI,SAACjC,GAAD,OACZ,cAAC,EAAD,CAA2BA,QAASA,GAAtBA,EAAQQ,cCYjB0B,EA9BF,WACX,OACE,qCACE,qBAAKtB,UAAU,aAAf,SACE,sBAAKA,UAAU,sDAAf,UAEE,sBAAKA,UAAU,QAAf,UACE,oBAAIA,UAAU,UAAd,SACE,mDAEF,oBAAIA,UAAU,iCAAd,0BACA,wBAAQA,UAAU,qFAAlB,0BAMF,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,QAAQH,IAAI,oBAAoBE,IAAI,iBAKzD,qBAAKC,UAAU,QAAf,SACE,cAAC,EAAD,UCiBOuB,EAvCA,WACb,IAOQ9B,EAASD,qBAAWP,GAApBQ,KAER,OACE,mCACE,sBAAKO,UAAU,2DAAf,UACE,cAAC,IAAD,CAAML,GAAG,IAAT,SACE,qBAAKE,IAAI,mBAAmBE,IAAI,GAAGyB,MAAO,CAAEC,OAAQ,QAGtD,qBAAIzB,UAAU,oBAAd,UACE,6BACE,cAAC,IAAD,CAAML,GAAG,IAAT,oBAEF,oBAAIK,UAAU,OAAd,SACE,cAAC,IAAD,CAAML,GAAG,gBAAT,wBAEF,oBAAIK,UAAU,OAAd,SACE,cAAC,IAAD,CAAML,GAAG,QAAT,SACE,sBAAK6B,MAzBC,CAChBE,gBAAiB,UACjBC,QAAS,OACTC,QAAS,WACTC,aAAc,QAqBJ,UACE,+BAAOpC,EAAKgB,WAAahB,EAAKgB,WAAa,IAE3C,qBAAKT,UAAU,OAAOH,IAAI,mBAAmBE,IAAI,8BCvBlD+B,EARM,WACnB,OACE,8BACE,cAAC,EAAD,O,OC2LSC,EA5LF,WAEX,MAA0BvC,qBAAWP,GAA7BQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAGd,EAAgCL,mBAAS,IAAzC,mBAAOyB,EAAP,KAAiBC,EAAjB,KAGIiB,EAAQ,EAGZ,EAA2C3C,oBAAS,GAApD,mBAAO4C,EAAP,KAAqBC,EAArB,KAGAlB,qBAAU,WAEHvB,EAAKe,QAKNyB,GAKJhB,MAAM,2BAA4B,CAChCkB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,IAAKC,OAAOC,KAAKjD,EAAKe,WAE5CU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACJ,GACLC,EAAYD,GAEZoB,GAAmB,SAEtB,CAACzC,EAAMwC,IAGV,IAAMU,EAAS,SAACC,GACd,OAAOnD,EAAKe,MAAMoC,IA0BdC,EAAS,SAACD,EAAWzC,GACzB,IAAM2C,EAAM3C,EAAQwC,EAAOC,GAE3B,OADAZ,GAASc,EACFA,GA6CT,OAEGhC,EAASiC,OAOR,sBAAK/C,UAAU,0CAAf,UACE,oBAAIA,UAAU,kBAAd,wBACA,6BAEGc,EAASO,KAAI,SAACjC,GACb,OACE,oBAAIY,UAAU,QAAd,SACE,sBAAKA,UAAU,oCAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,qBAAKA,UAAU,OAAOH,IAAKT,EAAQU,MAAOC,IAAI,KAC9C,sBAAMC,UAAU,sBAAhB,SAAuCZ,EAAQa,UAEjD,gCACE,wBACED,UAAU,oDACVI,QAAS,YArFX,SAACwC,GACjB,IAAMI,EAAcvD,EAAKe,MAAMoC,GAC/B,GAAoB,IAAhBI,EAAJ,CAIA,IAAMzC,EAAK,eAAQd,GACnBc,EAAMC,MAAMoC,GAAaI,EAAc,EACvCzC,EAAME,YAAc,EACpBf,EAAQa,IA6EY0C,CAAU7D,EAAQQ,MAHtB,eAQA,mBAAGI,UAAU,OAAb,SAAqB2C,EAAOvD,EAAQQ,OACpC,wBACEI,UAAU,oDACVI,QAAS,YAvGX,SAACwC,GACjB,IAAMI,EAAcvD,EAAKe,MAAMoC,GACzBrC,EAAK,eAAQd,GACnBc,EAAMC,MAAMoC,GAAaI,EAAc,EACvCzC,EAAME,YAAc,EACpBf,EAAQa,GAmGY2C,CAAU9D,EAAQQ,MAHtB,kBASF,2CAASiD,EAAOzD,EAAQQ,IAAKR,EAAQe,UACrC,wBACEH,UAAU,4DACVI,QAAS,YApFN,SAACwC,GACpB,IAAMrC,EAAK,eAAQd,GACb0D,EAAM5C,EAAMC,MAAMoC,UAGjBrC,EAAMC,MAAMoC,GAGnBrC,EAAME,YAAc0C,EAGpBzD,EAAQa,GAGR,IAAM6C,EAAqBtC,EAASuC,QAClC,SAACjE,GAAD,OAAaA,EAAQQ,MAAQgD,KAO/B7B,EAAYqC,GA+DME,CAAalE,EAAQQ,MAHzB,wBA1BuBR,EAAQQ,UAuCzC,oBAAII,UAAU,SACd,sBAAKA,UAAU,aAAf,UACE,6CADF,WACyBgC,KAEzB,qBAAKhC,UAAU,kBAAf,SACE,wBACEA,UAAU,oDACVI,QA5Ea,WAErBmD,OAAOC,MAAM,8BAGbzC,EAAY,IAGZrB,EAAQ,KAkEF,4BAxDJ,qBACEM,UAAU,sBACVH,IAAI,yBACJE,IAAI,MCbG0D,EA5GO,WAGpB,MAA8BpE,mBAAS,IAAvC,mBAAOD,EAAP,KAAgBsE,EAAhB,KACMC,EAASC,cACTC,EAAWC,cAGjB,EAAgCzE,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAA0BC,qBAAWP,GAA7BQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAEdsB,qBAAU,WACRC,MAAM,iBAAD,OAAkB0C,EAAO/D,MAC3BsB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACLsE,EAAWtE,QAEd,CAACuE,EAAO/D,MAyDX,OACE,sBAAKI,UAAU,0BAAf,UACE,wBACEA,UAAU,kBACVI,QAAS,WACPyD,EAAS,MAHb,kBAQA,sBAAK7D,UAAU,OAAf,UACE,qBAAKH,IAAKT,EAAQU,MAAOC,IAAI,UAC7B,sBAAKC,UAAU,QAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCZ,EAAQa,OAC3C,qBAAKD,UAAU,UAAf,SAA0BZ,EAAQc,OAClC,sBAAKF,UAAU,iBAAf,oBAAmCZ,EAAQe,SAC3C,yBACEH,UAAS,UACPV,EAAW,eAAiB,gBADrB,2CAGTc,QAAS,SAACC,IA1EF,SAACA,EAAGjB,GACpBiB,EAAEC,iBAGF,IAAIC,EAAK,eAAQd,GAKZc,EAAMC,QACTD,EAAMC,MAAQ,IAKZD,EAAMC,MAAMpB,EAAQQ,KACtBW,EAAMC,MAAMpB,EAAQQ,MAAQ,EAK5BW,EAAMC,MAAMpB,EAAQQ,KAAO,EAIxBW,EAAME,aACTF,EAAME,WAAa,GAErBF,EAAME,YAAc,EAGpBf,EAAQa,GACRhB,GAAY,GACZmB,YAAW,WACTnB,GAAY,KACX,KAwCOoB,CAAUN,EAAGjB,IAEfwB,SAAUtB,EAPZ,gBASMA,EAAW,KAAO,gBCtDnByE,MAzCf,WAEE,MAAwB1E,mBAAS,IAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAsBA,OAjBAsB,qBAAU,WCdH,IAAIgD,SAAQ,SAACC,EAASC,GAE3BD,EADaV,OAAOY,aAAaC,QAAQ,YDe/BlD,MAAK,SAACzB,GAEdC,EAAQ4C,KAAK+B,MAAM5E,SAGpB,IAGHuB,qBAAU,YClBa,SAACvB,GACxB8D,OAAOY,aAAaG,QAAQ,OAAQhC,KAAKC,UAAU9C,IDkBjD8E,CAAUjC,KAAKC,UAAU9C,MAIxB,CAACA,IAGF,cAAC,IAAD,UACE,cAACR,EAAYuF,SAAb,CAAsBC,MAAO,CAAEhF,OAAMC,WAArC,SACE,sBAAKM,UAAU,MAAf,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0E,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,gBAAgBC,QAAS,cAAC,EAAD,MACrC,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,QAAS,cAAC,EAAD,MACtC,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,iBEvCzCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3b8077d4.chunk.js","sourcesContent":["import { createContext } from 'react';\n\n// When \"ADD\" button in Product in clicked, items in Navbar must be updated and that product (item) must be rendered in Cart. In react, passing data from parent to children component in through props and from child to parent is though functions as props. But, these are sibling components. Data flow among siblings are complex. This is solved by using \"CONTEXT API\". When context api is used, data will be stored in a centralized location, typically in root level (App level), so that data can be shared with all components easily. This is how state management is done with Context API. If project is bigger, for state management, libraries like \"REDUX\" are used. By using context api, passing props for every component can be prevented.\n\nexport const CartContext = createContext(null);\n","import { Link } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { CartContext } from '../CartContext';\nimport { useState } from 'react';\n\nconst Product = ({ product }) => {\n  // State to change the color and text of ADD button:\n  const [isAdding, setIsAdding] = useState(false);\n\n  const { cart, setCart } = useContext(CartContext);\n\n  // Add to cart\n  const addToCart = (e, product) => {\n    e.preventDefault(); // to prevent redirecting to SingleProduct on clicking \"ADD\".\n\n    // When clicked on \"ADD\", there may be a chance that some products are already added to cart. So, once clicked, first existing data in the cart must be copied:\n    let _cart = { ...cart }; // {} (empty object initially)\n\n    // '_' in '_cart' represents that the variable is local, not coming from other components as prop. 'cart' state in App is passed as data in 'value', and it received here with useContext. Then, 'cart' is copied using spread operator as {...cart} to prevent manipulation of main 'cart' object as objects are always passed as reference. This 'cart' object is stored in local variable '_cart'. So, for '_cart' the value will be what is stored in useState in App which is an empty object in the beginning ({}). As its value updates, the value of '_cart' will be updated.\n\n    // w.r.t the logic described below for reference, when 'cart' data is received and if there is nothing the cart, meaning if 'items' key is not there in cart object, then 'items' key is added to cart object with an empty object as key to it:\n    if (!_cart.items) {\n      _cart.items = {};\n      // Now, _cart value changes from {} to {items: {}}\n    }\n\n    // Next, if there are already any items in the cart, then its 'id' (_id) must be checked and its value (which is its quantity) must be increased by 1\"\n    if (_cart.items[product._id]) {\n      _cart.items[product._id] += 1;\n    }\n\n    // Lastly, if the cart has some items but an item is getting added first time to the cart, then for its id, its value should be set to 1 which is that item's quantity:\n    else {\n      _cart.items[product._id] = 1;\n    }\n\n    // Finally, total number of items added to the cart must be updated in 'totalItems'. If there is no item in the cart, value of _cart.totalItems must be set to zero to avoid errors:\n    if (!_cart.totalItems) {\n      _cart.totalItems = 0;\n    }\n    _cart.totalItems += 1;\n\n    // Now, 'setCart' must be used to set the cart as per the updated data. To use setCart here, it must be passed in value in App. So, 'setCart' is also added to 'value' in App and received in useContext, and used here:\n    setCart(_cart);\n    setIsAdding(true);\n    setTimeout(() => {\n      setIsAdding(false);\n    }, 1000);\n\n    // This is all logic needed to add products to cart.\n\n    // Now, with setCart, 'cart' data is updated in 'useState' in App. But, this is not yet reflected in localstorage. To do that, another useEffect hook in used in App comp.\n\n    // Logic for cart data:\n    // cart will be an object, which has 'items' object in it that contains 'id' of items as key and number of that item as its value. And it contains 'totalItems' that has the value of total number of items in the cart as shown below (for understanding purpose):\n    /* \n    const cart = {\n      items: {\n        '60c67bdff5ee510015f3dda8': 2,\n        '60c67bc0f5ee510015f3dda7': 3,\n      },\n      totalItems: 5,\n    }; \n    */\n  };\n\n  return (\n    <Link to={`/products/${product._id}`}>\n      <div>\n        <img src={product.image} alt=\"pizza\" />\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-bold py-2\">{product.name}</h2>\n          <span className=\"bg-gray-200 py-1 rounded-full text-sm px-4\">\n            {product.size}\n          </span>\n        </div>\n        <div className=\"flex justify-between items-center mt-4\">\n          <span>₹ {product.price}</span>\n          <button\n            className={`${\n              isAdding ? 'bg-green-500' : 'bg-yellow-500'\n            }  py-1 px-4 rounded-full font-bold`}\n            onClick={(e) => {\n              addToCart(e, product);\n            }}\n            disabled={isAdding}\n          >\n            ADD{isAdding ? 'ED' : ''}\n          </button>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Product;\n","import { useState, useEffect } from 'react';\nimport Product from './Product';\n\nconst Products = () => {\n  // const { name } = useContext(CartContext);\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/products')\n      .then((response) => response.json())\n      .then((products) => {\n        setProducts(products);\n      });\n  }, []);\n\n  return (\n    <div className=\"container mx-auto pb-24\">\n      <h1 className=\"text-lg font-bold my-8\">Products</h1>\n      <div className=\"grid grid-cols-5 my-8 gap-24\">\n        {products.map((product) => (\n          <Product key={product._id} product={product} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Products;\n","import Products from '../components/Products';\n\nconst Home = () => {\n  return (\n    <>\n      <div className=\"hero py-16\">\n        <div className=\"container mx-auto flex items-center justify-between\">\n          {/* Texts (left side) */}\n          <div className=\"w-1/2\">\n            <h6 className=\"text-lg\">\n              <em>Are you hungry?</em>\n            </h6>\n            <h1 className=\"text-3xl md:text-6xl font-bold\">Don't Wait !</h1>\n            <button className=\"bg-yellow-500 px-6 py-2 rounded-full text-white font-bold mt-4 hover:bg-yellow-600\">\n              Order Now\n            </button>\n          </div>\n\n          {/* Image (right side) */}\n          <div className=\"w-1/2\">\n            <img className=\"w-4/5\" src=\"/images/pizza.png\" alt=\"pizza\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pb-24\">\n        <Products />\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import { Link } from 'react-router-dom';\nimport { useContext } from 'react';\nimport { CartContext } from '../CartContext';\n\nconst Navbar = () => {\n  const cartStyle = {\n    backgroundColor: '#F59E0D',\n    display: 'flex',\n    padding: '6px 12px',\n    borderRadius: '50px',\n  };\n\n  const { cart } = useContext(CartContext);\n\n  return (\n    <>\n      <nav className=\"container mx-auto flex items-center justify-between py-4\">\n        <Link to=\"/\">\n          <img src=\"/images/logo.png\" alt=\"\" style={{ height: 45 }} />\n        </Link>\n\n        <ul className=\"flex items-center\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"ml-6\">\n            <Link to=\"/productspage\">Products</Link>\n          </li>\n          <li className=\"ml-6\">\n            <Link to=\"/cart\">\n              <div style={cartStyle}>\n                <span>{cart.totalItems ? cart.totalItems : 0}</span>\n                {/* In the above code, if there is any item in the cart, that number should be shown, else 0 to be shown. This is done to take care of the error that may appear due to this.*/}\n                <img className=\"ml-2\" src=\"/images/cart.png\" alt=\"cart-icon\" />\n              </div>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","import Products from '../components/Products';\n\nconst ProductsPage = () => {\n  return (\n    <div>\n      <Products />\n    </div>\n  );\n};\n\nexport default ProductsPage;\n","import { useContext } from 'react';\nimport { useEffect, useState } from 'react/cjs/react.development';\nimport { CartContext } from '../CartContext';\n\nconst Cart = () => {\n  // updated cart data is received from useState of App comp through useContext:\n  const { cart, setCart } = useContext(CartContext);\n\n  // State to store fetched products:\n  const [products, setProducts] = useState([]);\n\n  // variable to update total sum:\n  let total = 0;\n\n  // There is an important optimization needed w.r.t below 'cart-items' fetch call. That is, with each increment or decrement of items in the cart, corresponding function executes which runs 'setCart', which inturn changes the main 'cart' data. As 'cart' is the dependency array for 'fetch-items' useEffect below, this re-renders the page and results in making 'cart-items' fetch call again on the server, which is not needed each time like this with every increment or decrement. Once, data is fetched, it is enough and need to repeat fetch call with each increment or decrement. This is prevented by creating 'priceFetched' state and setting it 'false' in the beginning and 'true' once data is fetched from 'cart-items' end point:\n  const [priceFetched, togglePriceFetched] = useState(false);\n\n  // using the product ids obtained from above, those products are fetched using useEffect:\n  useEffect(() => {\n    // If the cart is empty, nothing to be done:\n    if (!cart.items) {\n      return;\n    }\n\n    // If priceFetched is 'true' fetch call on 'cart-items' is not required as data is already fetched before:\n    if (priceFetched) {\n      return;\n    }\n\n    // If there are items, using their id, they are fetched from the server:\n    fetch('/api/products/cart-items', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ ids: Object.keys(cart.items) }), // To add all the keys (ids) into an array\n    })\n      .then((response) => response.json())\n      .then((products) => {\n        setProducts(products);\n        // Toggle priceFetched to 'true' so that no fetch call is done agian on 'cart-items':\n        togglePriceFetched(true);\n      });\n  }, [cart, priceFetched]); // 'cart' is used as dependency array beacuse fetching id from LS and product from server with that id takes time. So, if there is no data yet, there is nothing to fetch. So, with cart as dependency, this executes only with change in cart data (that is, once cart data is fetched).\n\n  // Get quantity\n  const getQty = (productId) => {\n    return cart.items[productId];\n  };\n\n  // Increment\n  const increment = (productId) => {\n    const existingQty = cart.items[productId]; // gives existing qty on clicked product\n    const _cart = { ...cart }; // cloning cart as a local copy that can be modified\n    _cart.items[productId] = existingQty + 1; // incrementing the qty of clicked product on local copy by 1\n    _cart.totalItems += 1; // increment the value of totalItems of local copy by 1\n    setCart(_cart); // updated the main cart data (in App) w.r.t updated local copy that reflects everywhere needed (both in quantity of that product and total product on Nav)\n  };\n\n  // Decrement\n  const decrement = (productId) => {\n    const existingQty = cart.items[productId]; // gives existing qty on clicked product\n    if (existingQty === 1) {\n      return;\n      // When '-' is clicked, number should not go less than 1. Least number should be 1. If not even 1 needed, it shall be deleted which is taken care in 'deleting item' logic.\n    }\n    const _cart = { ...cart }; // cloning cart as a local copy that can be modified\n    _cart.items[productId] = existingQty - 1; // decrementing the qty of clicked product on local copy by 1\n    _cart.totalItems -= 1; // decrement the value of totalItems of local copy by 1\n    setCart(_cart); // updated the main cart data (in App) w.r.t updated local copy that reflects everywhere needed (both in quantity of that product and total product on Nav)\n  };\n\n  // Get Sum\n  const getSum = (productId, price) => {\n    const sum = price * getQty(productId); // updates the price of the product (on which + or - is clicked w.r.t its quantity in the cart currently).\n    total += sum; // updates grand total w.r.t every change in sum with addition and deletion of items in cart. So, for each + or -, 'sum' is updated and that updated sum is added to current 'total' which is the value of grand total.\n    return sum;\n  };\n\n  // Handle Delete\n  const handleDelete = (productId) => {\n    const _cart = { ...cart }; // cloning\n    const qty = _cart.items[productId]; // gets the quantity of clicked product. This is required to delete this qunatity from total quantity.\n\n    // We need to serach for the key (productId) of the clicked product and delete it. As _cart is an object, to delete a property from an object, \"delete\" keyword is used. As each product is a property of _cart object, 'delete' is used to delete them:\n    delete _cart.items[productId];\n\n    // Now, updating 'totalItems' by subtracting 'qty' from it:\n    _cart.totalItems -= qty;\n\n    // Update the 'cart' data (state) with current updated '_cart':\n    setCart(_cart);\n\n    // But the above just display 'NaN' in price but doesn't remove the product from UI unless the page is refreshed. But, it shall be removed from UI when 'Delete' is clicked. This can be done by filtering the deleted product from 'products' data on which 'map' is used:\n    const updatedProductList = products.filter(\n      (product) => product._id !== productId\n      // filter returns 'true' if the defined condition is matched, else returns 'false', and returns the ones which are 'true'. So, if the clicked id (productId) is not matching with current id (id of the product in the current iteration of the loop which is product._id), that product will be returned. If 'productId' matches with 'product._id', it will not be returned.\n\n      // This successfully removes the product from UI when clicked on its 'Delete' button (without refreshing page).\n    );\n\n    // Update the 'products' data (state) with current 'products' state which is 'updatedProductList':\n    setProducts(updatedProductList);\n  };\n\n  // Handle Order Now\n  const handleOrderNow = () => {\n    // Display alert message:\n    window.alert('Order Placed Successfully!');\n\n    // Set 'products' to an empty array:\n    setProducts([]);\n\n    // Set 'cart' to an empty object:\n    setCart({});\n\n    // As 'proudcts' is empty (length is zero or no length), check in 'return' will be true for '!products.length' and empty cart image will be displayed.\n\n    // As no call on the backend is done, this completes 'Order Now'.\n  };\n\n  return (\n    // If the cart is empty, corresponding image to be displayed. If cart has items, those items (products) must be displayed:\n    !products.length ? (\n      <img\n        className=\"mx-auto w-1/2 mt-12\"\n        src=\"/images/empty-cart.png\"\n        alt=\"\"\n      />\n    ) : (\n      <div className=\"container mx-auto lg:w-1/2 w-full pb-24\">\n        <h1 className=\"my-12 font-bold\">Cart Items</h1>\n        <ul>\n          {/* Looping through the data fetched to display on Cart page */}\n          {products.map((product) => {\n            return (\n              <li className=\"mb-12\" key={product._id}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <img className=\"h-16\" src={product.image} alt=\"\" />\n                    <span className=\"font-bold ml-4 w-48\">{product.name}</span>\n                  </div>\n                  <div>\n                    <button\n                      className=\"bg-yellow-500 px-4 py-2 rounded-full leading-none\"\n                      onClick={() => {\n                        decrement(product._id);\n                      }}\n                    >\n                      -\n                    </button>\n                    <b className=\"px-4\">{getQty(product._id)}</b>\n                    <button\n                      className=\"bg-yellow-500 px-4 py-2 rounded-full leading-none\"\n                      onClick={() => {\n                        increment(product._id);\n                      }}\n                    >\n                      +\n                    </button>\n                  </div>\n                  <span>₹ {getSum(product._id, product.price)}</span>\n                  <button\n                    className=\"bg-red-500 px-4 py-2 rounded-full leading-none text-white\"\n                    onClick={() => {\n                      handleDelete(product._id);\n                    }}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        <hr className=\"my-6\" />\n        <div className=\"text-right\">\n          <b>Grand Total:</b> ₹ {total}\n        </div>\n        <div className=\"text-right mt-6\">\n          <button\n            className=\"bg-yellow-500 px-4 py-2 rounded-full leading-none\"\n            onClick={handleOrderNow}\n          >\n            Order Now\n          </button>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Cart;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router';\nimport { useContext } from 'react';\nimport { CartContext } from '../CartContext';\n\nconst SingleProduct = () => {\n  // Product with the specific id can be fetched from another end point. The value of id is retrieved from url using 'useParams' hook. It returns an object with product's id. \"_id\" will be the key and its id will be the corresponding value. So, it is accessed in fetch as 'params._id'.\n\n  const [product, setProduct] = useState({});\n  const params = useParams();\n  const navigate = useNavigate();\n\n  // State to change the color and text of ADD button:\n  const [isAdding, setIsAdding] = useState(false);\n\n  const { cart, setCart } = useContext(CartContext);\n\n  useEffect(() => {\n    fetch(`/api/products/${params._id}`)\n      .then((response) => response.json())\n      .then((product) => {\n        setProduct(product);\n      });\n  }, [params._id]);\n\n  // Add to cart\n  const addToCart = (e, product) => {\n    e.preventDefault(); // to prevent redirecting to SingleProduct on clicking \"ADD\".\n\n    // When clicked on \"ADD\", there may be a chance that some products are already added to cart. So, once clicked, first existing data in the cart must be copied:\n    let _cart = { ...cart }; // {} (empty object initially)\n\n    // '_' in '_cart' represents that the variable is local, not coming from other components as prop. 'cart' state in App is passed as data in 'value', and it received here with useContext. Then, 'cart' is copied using spread operator as {...cart} to prevent manipulation of main 'cart' object as objects are always passed as reference. This 'cart' object is stored in local variable '_cart'. So, for '_cart' the value will be what is stored in useState in App which is an empty object in the beginning ({}). As its value updates, the value of '_cart' will be updated.\n\n    // w.r.t the logic described below for reference, when 'cart' data is received and if there is nothing the cart, meaning if 'items' key is not there in cart object, then 'items' key is added to cart object with an empty object as key to it:\n    if (!_cart.items) {\n      _cart.items = {};\n      // Now, _cart value changes from {} to {items: {}}\n    }\n\n    // Next, if there are already any items in the cart, then its 'id' (_id) must be checked and its value (which is its quantity) must be increased by 1\"\n    if (_cart.items[product._id]) {\n      _cart.items[product._id] += 1;\n    }\n\n    // Lastly, if the cart has some items but an item is getting added first time to the cart, then for its id, its value should be set to 1 which is that item's quantity:\n    else {\n      _cart.items[product._id] = 1;\n    }\n\n    // Finally, total number of items added to the cart must be updated in 'totalItems'. If there is no item in the cart, value of _cart.totalItems must be set to zero to avoid errors:\n    if (!_cart.totalItems) {\n      _cart.totalItems = 0;\n    }\n    _cart.totalItems += 1;\n\n    // Now, 'setCart' must be used to set the cart as per the updated data. To use setCart here, it must be passed in value in App. So, 'setCart' is also added to 'value' in App and received in useContext, and used here:\n    setCart(_cart);\n    setIsAdding(true);\n    setTimeout(() => {\n      setIsAdding(false);\n    }, 1000);\n\n    // This is all logic needed to add products to cart.\n\n    // Now, with setCart, 'cart' data is updated in 'useState' in App. But, this is not yet reflected in localstorage. To do that, another useEffect hook in used in App comp.\n\n    // Logic for cart data:\n    // cart will be an object, which has 'items' object in it that contains 'id' of items as key and number of that item as its value. And it contains 'totalItems' that has the value of total number of items in the cart as shown below (for understanding purpose):\n    /* \n    const cart = {\n      items: {\n        '60c67bdff5ee510015f3dda8': 2,\n        '60c67bc0f5ee510015f3dda7': 3,\n      },\n      totalItems: 5,\n    }; \n    */\n  };\n\n  return (\n    <div className=\"container mx-auto mt-12\">\n      <button\n        className=\"mb-12 font-bold\"\n        onClick={() => {\n          navigate('/');\n        }}\n      >\n        Back\n      </button>\n      <div className=\"flex\">\n        <img src={product.image} alt=\"pizza\" />\n        <div className=\"ml-16\">\n          <h1 className=\"text-xl font-bold\">{product.name}</h1>\n          <div className=\"text-md\">{product.size}</div>\n          <div className=\"font-bold mt-2\">₹ {product.price}</div>\n          <button\n            className={`${\n              isAdding ? 'bg-green-500' : 'bg-yellow-500'\n            }  py-1 px-8 rounded-full font-bold mt-4`}\n            onClick={(e) => {\n              addToCart(e, product);\n            }}\n            disabled={isAdding}\n          >\n            ADD{isAdding ? 'ED' : ''}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleProduct;\n","import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Navbar from './components/Navbar';\nimport ProductsPage from './pages/ProductsPage';\nimport Cart from './pages/Cart';\nimport SingleProduct from './pages/SingleProduct';\nimport { CartContext } from './CartContext';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { getCart, storeCart } from './Helpers';\n\nfunction App() {\n  // cart data must be fetched from localstorage as users may have added items to cart. To do this, a local state 'cart' is created:\n  const [cart, setCart] = useState({});\n\n  // Before fetching data from localstorage, cart data must be added to it when \"ADD\" is clicked. That logic is written in 'Product' component.\n\n  // Once the data is in the cart, that is fetched using useEffect:\n  useEffect(() => {\n    // Let's handle the promise returned by getCart() from Helpers:\n    getCart().then((cart) => {\n      // Now, with promise, availability of 'cart' data is assured. So, setCart is confidently executed:\n      setCart(JSON.parse(cart)); // cart data from local storage.\n      // So, now 'cart' data in 'useState' is completely fresh and updated. So, through context, this can be access by any component in the context scope.\n    });\n  }, []); // empty dependency array is to achieve the above only when teh component is mounted.\n\n  // To reflect the updated 'cart' data obtained with setCart in local storage, another useEffect hook is used with 'cart' as dependency array:\n  useEffect(() => {\n    storeCart(JSON.stringify(cart));\n    // updated 'cart' object is stored in LS for 'cart'. Successful working of this can be checked in LS under 'Application' tab of console. With each \"ADD\" click, both items and total items are updated.\n\n    // Now, the updated cart data in local storage can be fetched in above useEffect hook.\n  }, [cart]);\n\n  return (\n    <Router>\n      <CartContext.Provider value={{ cart, setCart }}>\n        <div className=\"App\">\n          <Navbar></Navbar>\n          <Routes>\n            <Route path=\"/\" element={<Home />}></Route>\n            <Route path=\"/productspage\" element={<ProductsPage />}></Route>\n            <Route path=\"/products/:_id\" element={<SingleProduct />}></Route>\n            <Route path=\"/cart\" element={<Cart />}></Route>\n          </Routes>\n        </div>\n      </CartContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// Getting data from LS and storing data to LS is kept here and exported. It is imported in App to make it look cleaner.\n\nexport const getCart = () => {\n  // The process of getting item from LS takes time. So, to handle the further process better by running 'setCart(JSON.parse(cart))' only after 'cart' data is ready, let's return a promise:\n  return new Promise((resolve, reject) => {\n    const cart = window.localStorage.getItem('cart');\n    resolve(cart);\n  });\n};\n\nexport const storeCart = (cart) => {\n  window.localStorage.setItem('cart', JSON.stringify(cart));\n  // updated 'cart' object is stored in LS for 'cart'. Successful working of this can be checked in LS under 'Application' tab of console. With each \"ADD\" click, both items and total items are updated.\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}